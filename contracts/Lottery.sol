// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {LotteryToken} from "./LotteryToken.sol";

contract Lottery is Ownable {
    uint256 public lotteryClosingEpochInSeconds;
    bool public lotteryOpen;

    uint256 public betPrice;
    uint256 public betFee;

    LotteryToken public lotteryTxnToken;
    address[] public lotteryPlayers;
    mapping(address => bool) public activeLotteryPlayers;

    uint256 public currentLotteryPayoutPool;
    address public latestLotteryWinner;
    mapping(address => uint256) public winningStash;
    uint256 public winningWithdrawBaseFee;
    uint256 private winningsToTransfer;

    uint256 public feeCollection;
    uint256 private feeToWithdraw;

    // contract deployer (i.e. owner) sets a fixed betPrice and betFee for all lotteries generated by this smart contract
    constructor(
        uint256 _betPrice,
        uint256 _betFee,
        string memory _tokenName,
        string memory _tokenSymbol
    ) {
        betPrice = _betPrice;
        betFee = _betFee;

        activeLotteryPlayers[msg.sender] = true;

        // token contract will be owned by Lottery contract
        lotteryTxnToken = new LotteryToken(_tokenName, _tokenSymbol);
    }

    modifier whenLotteryClosed() {
        require(!lotteryOpen, "Lottery: Already open for bets!");
        _;
    }

    modifier whenLotteryOpen() {
        require(lotteryOpen, "Lottery: Not yet open for bets!");
        require(
            block.timestamp < lotteryClosingEpochInSeconds,
            "Lottery: Betting window closed!"
        );
        _;
    }

    modifier isLotteryCloseable() {
        require(lotteryOpen, "Lottery: Not yet open for bets!");
        require(
            block.timestamp > lotteryClosingEpochInSeconds,
            "Lottery: Betting window still open!"
        );
        _;
    }

    receive() external payable {
        // ...
    }

    fallback() external {
        // ...
    }

    /// @notice starts a new lottery pool
    /// @param _closingEpochInSeconds epoch time in seconds when the lottery will close for bets
    function startLottery(
        uint256 _closingEpochInSeconds,
        uint256 _winningWithdrawBaseFee
    ) public onlyOwner whenLotteryClosed {
        require(
            _closingEpochInSeconds > block.timestamp,
            "Lottery: Closing time must be in the future!"
        );
        lotteryClosingEpochInSeconds = _closingEpochInSeconds;
        lotteryOpen = true;
        winningWithdrawBaseFee = _winningWithdrawBaseFee;
    }

    /// @notice receive ether to provide lottery tokens
    function sellLotteryTokens() public payable {
        activeLotteryPlayers[msg.sender] = true;

        // mint tokens for buyer's account in token contract
        lotteryTxnToken.mint(msg.sender, msg.value);
    }

    /// @notice place lottery bets
    function bet() public whenLotteryOpen {
        // register lottery better into contract's state
        lotteryPlayers.push(msg.sender);
        currentLotteryPayoutPool += betPrice;
        feeCollection += betFee;

        // transfer lotterTokens into lottery contract's account from better's account
        // https://stackoverflow.com/a/71809065
        lotteryTxnToken.transferFrom(
            msg.sender,
            address(this),
            betPrice + betFee
        );
    }

    /// @notice ends currently open lottery pool (if one is active) and calculates possible winnings
    function endLottery() public isLotteryCloseable {
        require(
            activeLotteryPlayers[msg.sender] == true,
            "Lottery: You are not an active player!"
        );
        /// @notice generates a block-property-based random number
        /// @dev works only after the merge
        uint256 randomNumber = block.difficulty;

        // calculate winning index of participant addresses
        if (lotteryPlayers.length > 0) {
            latestLotteryWinner = lotteryPlayers[
                randomNumber % lotteryPlayers.length
            ];

            // assign the current lottery pool value to addres
            winningStash[latestLotteryWinner] += currentLotteryPayoutPool;
        }

        // reset current lottery pool
        currentLotteryPayoutPool = 0;

        // change state of contract
        lotteryOpen = false;
    }

    /// @notice withdraw winnings if the sender has any
    function withdrawWinning(
        address _winningClaimer,
        uint256 _calculatedWinningFee
    ) public {
        if (_calculatedWinningFee > winningWithdrawBaseFee) {
            feeCollection += _calculatedWinningFee;
            winningsToTransfer =
                winningStash[_winningClaimer] -
                _calculatedWinningFee;
            winningStash[_winningClaimer] = 0;
            lotteryTxnToken.transfer(_winningClaimer, winningsToTransfer);
        } else {
            feeCollection += winningWithdrawBaseFee;
            winningsToTransfer =
                winningStash[_winningClaimer] -
                winningWithdrawBaseFee;
            winningStash[_winningClaimer] = 0;
            lotteryTxnToken.transfer(
                _winningClaimer,
                winningStash[_winningClaimer] - winningWithdrawBaseFee
            );
        }
        winningsToTransfer = 0;
    }

    /// @notice owner collects accumulated fees and restarts lottery
    function collectFees() public onlyOwner {
        require(
            (feeCollection * (1 ether)) > (0.05 ether),
            "Lottery, fee collected too less to collect!"
        );

        feeToWithdraw = feeCollection;
        feeCollection = 0;
        lotteryTxnToken.transfer(msg.sender, feeToWithdraw);
        feeToWithdraw = 0;
    }
}
