// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {LotteryToken} from "./LotteryToken.sol";

contract Lottery is Ownable {
    uint256 public lotteryClosingEpochInSeconds;
    bool public lotteryOpen;

    uint256 public betPrice;
    uint256 public betFee;

    LotteryToken public lotteryTxnToken;

    // contract deployer (i.e. owner) sets a fixed betPrice and betFee for all lotteries generated by this smart contract
    constructor(
        uint256 _betPrice,
        uint256 _betFee,
        string memory _tokenName,
        string memory _tokenSymbol
    ) {
        betPrice = _betPrice;
        betFee = _betFee;

        // token contract will be owned by Lottery contract
        lotteryTxnToken = new LotteryToken(_tokenName, _tokenSymbol);
    }

    modifier whenLotteryClosed() {
        require(!lotteryOpen, "Lottery: Not currently open for bets");
        _;
    }

    receive() external payable {
        // ...
    }

    fallback() external {
        // ...
    }

    // External functions
    // ...

    // External functions that are view
    // ...

    // External functions that are pure
    // ...

    // Public functions
    // ...

    /// @param _closingEpochInSeconds epoch time in seconds when the lottery will close for bets
    function startLottery(uint256 _closingEpochInSeconds)
        public
        onlyOwner
        whenLotteryClosed
    {
        require(
            _closingEpochInSeconds > block.timestamp,
            "Lottery: Closing time must be in the future"
        );
        lotteryClosingEpochInSeconds = _closingEpochInSeconds;
        lotteryOpen = true;
    }

    /// @notice receive ether to provide lottery tokens
    function sellLotteryTokens() public payable {
        lotteryTxnToken.mint(msg.sender, msg.value);
    }

    // Internal functions
    // ...

    // Private functions
    // ...
}
