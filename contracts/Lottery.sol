// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

contract Lottery is Ownable {
    uint256 public lotteryClosingEpochInSeconds;
    bool public lotteryOpen;

    uint256 public betPrice;
    uint256 public betFee;

    // contract deployer (i.e. owner) sets a fixed betPrice and betFee for all lotteries generated by this smart contract
    constructor(uint256 _betPrice, uint256 _betFee) {
        betPrice = _betPrice;
        betFee = _betFee;
    }

    modifier whenLotteryClosed() {
        require(!lotteryOpen, "Lottery: Note currently open for bets");
        _;
    }

    receive() external payable {
        // ...
    }

    fallback() external {
        // ...
    }

    // External functions
    // ...

    // External functions that are view
    // ...

    // External functions that are pure
    // ...

    // Public functions
    // ...

    /// @param _closingEpochInSeconds epoch time in seconds when the lottery will close for bets
    function startLottery(uint256 _closingEpochInSeconds)
        public
        onlyOwner
        whenLotteryClosed
    {
        require(
            _closingEpochInSeconds > block.timestamp,
            "Lottery: Closing time must be in the future"
        );
        lotteryClosingEpochInSeconds = _closingEpochInSeconds;
        lotteryOpen = true;
    }

    // Internal functions
    // ...

    // Private functions
    // ...
}
